name: Deploy Ganesha (Lean + Fast)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Create production .env file
        run: |
          cp .env.example .env
          sed -i 's/APP_ENV=local/APP_ENV=production/' .env
          sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
          sed -i 's|APP_URL=http://localhost:8000|APP_URL=https://ganeshainstitute.org|' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=localhost/' .env
          sed -i 's/DB_DATABASE=ganesha/DB_DATABASE=u476015804_ganesha/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=u476015804_ganesha/' .env
          sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' .env
          sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=sync/' .env
          sed -i 's/CACHE_STORE=database/CACHE_STORE=file/' .env

          # Handle special characters in password using different approach
          echo "DB_PASSWORD=\"or:d>E3o|\"" >> .env
          sed -i '/^DB_PASSWORD=$/d' .env

          # Add APP_KEY from secrets
          sed -i "s/APP_KEY=/APP_KEY=${{ secrets.APP_KEY }}/" .env

      - name: Install NPM and build assets
        run: |
          npm ci
          npm run build

      - name: Prepare lean deployment (Source code only)
        run: |
          mkdir -p deployment

          # Copy Laravel source code (NO VENDOR)
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r public/* deployment/
          cp .env deployment/
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/

          # Create .htaccess
          cat > deployment/.htaccess << 'EOF'
          <IfModule mod_rewrite.c>
              <IfModule mod_negotiation.c>
                  Options -MultiViews -Indexes
              </IfModule>

              RewriteEngine On

              # Handle Inertia.js and SPA routes
              RewriteCond %{REQUEST_URI} ^/(.*)?$
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule ^.*$ /index.php [L]

              # Redirect Trailing Slashes If Not A Folder...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_URI} (.+)/$
              RewriteRule ^ %1 [L,R=301]

              # Send Requests To Front Controller...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteRule ^ index.php [L]
          </IfModule>
          EOF

          # Create comprehensive deployment script
          cat > deployment/deploy.php << 'EOF'
          <?php
          echo "<h2>🚀 Ganesha Deployment</h2>";
          echo "<pre>";

          // 1. Install Composer dependencies
          echo "📦 Installing Composer dependencies...\n";
          exec('composer install --optimize-autoloader --no-dev --no-interaction 2>&1', $output, $return);

          if ($return !== 0) {
              echo "❌ Composer install failed:\n";
              foreach ($output as $line) echo $line . "\n";
              exit(1);
          }
          echo "✅ Composer dependencies installed\n";

          // 2. Set proper permissions
          echo "🔧 Setting permissions...\n";
          chmod('storage', 0755);
          chmod('storage/logs', 0755);
          chmod('storage/framework', 0755);
          chmod('storage/framework/cache', 0755);
          chmod('storage/framework/sessions', 0755);
          chmod('storage/framework/views', 0755);
          chmod('bootstrap/cache', 0755);
          echo "✅ Permissions set\n";

          // 3. Create storage link (Laravel way)
          echo "🔗 Creating storage link...\n";
          exec('php artisan storage:link 2>&1', $linkOutput, $linkReturn);
          if ($linkReturn === 0) {
              echo "✅ Storage link created\n";
          } else {
              // Fallback to manual symlink
              if (!file_exists('public/storage')) {
                  symlink('../storage/app/public', 'public/storage');
                  echo "✅ Storage link created (manual)\n";
              } else {
                  echo "✅ Storage link already exists\n";
              }
          }

          // 4. Clear all caches
          echo "🧹 Clearing caches...\n";
          exec('php artisan config:clear 2>&1');
          exec('php artisan route:clear 2>&1');
          exec('php artisan view:clear 2>&1');
          exec('php artisan cache:clear 2>&1');
          echo "✅ Caches cleared\n";

          // 5. Cache for production
          echo "⚡ Optimizing for production...\n";
          exec('php artisan config:cache 2>&1');
          exec('php artisan route:cache 2>&1');
          exec('php artisan view:cache 2>&1');
          echo "✅ Production optimizations applied\n";

          // 6. Run migrations (if requested)
          if (isset($_GET['migrate']) && $_GET['migrate'] === 'yes') {
              echo "🗃️ Running database migrations...\n";
              exec('php artisan migrate --force 2>&1', $migOutput, $migReturn);
              if ($migReturn === 0) {
                  echo "✅ Migrations completed\n";
              } else {
                  echo "❌ Migration failed:\n";
                  foreach ($migOutput as $line) echo $line . "\n";
              }
          } else {
              echo "ℹ️ Migrations skipped (add ?migrate=yes to run)\n";
          }

          // 7. Final status check
          echo "\n🎉 Deployment completed successfully!\n";
          echo "📊 Final status:\n";
          echo "- Laravel: " . (file_exists('vendor/laravel/framework') ? '✅ Ready' : '❌ Missing') . "\n";
          echo "- Storage: " . (file_exists('public/storage') ? '✅ Linked' : '❌ Not linked') . "\n";
          echo "- Config: " . (file_exists('bootstrap/cache/config.php') ? '✅ Cached' : '❌ Not cached') . "\n";
          echo "- Routes: " . (file_exists('bootstrap/cache/routes-v7.php') ? '✅ Cached' : '❌ Not cached') . "\n";

          echo "\n🌐 Website: https://ganeshainstitute.org\n";
          echo "</pre>";

          echo "<div style='margin-top: 20px;'>";
          echo "<a href='https://ganeshainstitute.org' style='background: #10b981; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>🌐 Visit Website</a> ";
          echo "<a href='status.php' style='background: #3b82f6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-left: 10px;'>📊 Check Status</a>";
          echo "</div>";
          ?>
          EOF

          # Create status checker
          cat > deployment/status.php << 'EOF'
          <?php
          echo "<h2>📊 Ganesha Status Check</h2>";
          echo "<style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .status { padding: 10px; margin: 5px 0; border-radius: 5px; }
          .success { background: #d1fae5; color: #065f46; }
          .error { background: #fee2e2; color: #dc2626; }
          .warning { background: #fef3c7; color: #92400e; }
          </style>";

          echo "<div class='status " . (phpversion() >= '8.1' ? 'success' : 'warning') . "'>";
          echo "🐘 PHP Version: " . phpversion();
          echo "</div>";

          echo "<div class='status " . (file_exists('vendor/laravel/framework') ? 'success' : 'error') . "'>";
          echo "🎯 Laravel: " . (file_exists('vendor/laravel/framework') ? 'Installed' : 'Missing');
          echo "</div>";

          echo "<div class='status " . (is_writable('storage') ? 'success' : 'error') . "'>";
          echo "📁 Storage Writable: " . (is_writable('storage') ? 'Yes' : 'No');
          echo "</div>";

          echo "<div class='status " . (file_exists('public/storage') ? 'success' : 'error') . "'>";
          echo "🔗 Storage Link: " . (file_exists('public/storage') ? 'Created' : 'Missing');
          echo "</div>";

          echo "<div class='status " . (file_exists('bootstrap/cache/config.php') ? 'success' : 'warning') . "'>";
          echo "⚡ Config Cached: " . (file_exists('bootstrap/cache/config.php') ? 'Yes' : 'No');
          echo "</div>";

          echo "<div class='status " . (file_exists('.env') ? 'success' : 'error') . "'>";
          echo "⚙️ Environment: " . (file_exists('.env') ? 'Configured' : 'Missing');
          echo "</div>";

          echo "<br><a href='deploy.php' style='background: #10b981; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>🚀 Run Deployment</a>";
          echo " <a href='deploy.php?migrate=yes' style='background: #f59e0b; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-left: 10px;'>🚀 Deploy + Migrate</a>";
          ?>
          EOF

      - name: Deploy to Hostinger (Fast upload - Source only)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_SERVER_DIR }}/
          local-dir: ./deployment/
          exclude: |
            **/vendor/**
            **/node_modules/**
            **/tests/**
            **/.git*
            **/.env.example
            **/.gitignore
            **/package*.json
            **/vite.config.js
            **/tailwind.config.js
            **/postcss.config.js
            **/phpunit.xml
            **/.DS_Store
            **/Thumbs.db
